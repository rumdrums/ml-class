function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters

	predictions = X*theta;
	errors = (predictions-y);
	%delta =  1/m * sum(errors.*X(:,2));
	delta =  X' * ( X * theta - y)
	theta = theta - (alpha/m * delta);

    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);
	printf("Cost is %.5f\n",J_history(iter));

end
pause
end
