Unsupervised Learning

K-means clustering algorithm
. randomly initialize "centroids"
. iterative:
	1) cluster assignment step -- assign each data point
		to centroid it's closest to
		-- for each i in 1 to m:
				c^i := index of cluster centroid closest to x^i
	2) "inner loop": move centroid step
		-- move them to average of points in that cluster
		-- for each k in 1 to K:
				u_k := average of points assigned to cluster k
	... REPEAT
. inputs:
	-- K: number of clusters
	-- Training set
. K-means for non-well-separated clusters

Optimization objective

. Cost function:
	J(c^1,...,c^m,u_1,...,U_k) = 1/m*sum(||x^i-u_c^i||^2)
		-- find c^i and u_c^i to minimize cost or "distortion"

Random initialization
. K < m --- duh
. randomly pick K training examples
. *** random initialization can lead to different results based on your choices
	-- susceptible to local optima of the cost function
	-- so, loop it a certain number times with different random initializations
		and pick the one that gives lowest cost
. looping the random initializations is more important when k is small
	-- eg, 2 to 10
. large k is less susceptible to problems of random initializations


